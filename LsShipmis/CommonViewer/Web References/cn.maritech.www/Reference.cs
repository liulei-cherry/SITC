//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.17929 版自动生成。
// 
#pragma warning disable 1591

namespace CommonViewer.cn.maritech.www {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebServiceSoap", Namespace="http://www.maritech.cn/shipmis/web/WebService.asmx")]
    public partial class WebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback WriteLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMailStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkRightOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService() {
            this.Url = global::CommonViewer.Properties.Settings.Default.CommonViewer_cn_maritech_www_WebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event WriteLogCompletedEventHandler WriteLogCompleted;
        
        /// <remarks/>
        public event getMailStateCompletedEventHandler getMailStateCompleted;
        
        /// <remarks/>
        public event checkRightCompletedEventHandler checkRightCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.maritech.cn/shipmis/web/WebService.asmx/WriteLog", RequestNamespace="http://www.maritech.cn/shipmis/web/WebService.asmx", ResponseNamespace="http://www.maritech.cn/shipmis/web/WebService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WriteLog(string key, string time, string position, string application, string operation, string log) {
            object[] results = this.Invoke("WriteLog", new object[] {
                        key,
                        time,
                        position,
                        application,
                        operation,
                        log});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WriteLogAsync(string key, string time, string position, string application, string operation, string log) {
            this.WriteLogAsync(key, time, position, application, operation, log, null);
        }
        
        /// <remarks/>
        public void WriteLogAsync(string key, string time, string position, string application, string operation, string log, object userState) {
            if ((this.WriteLogOperationCompleted == null)) {
                this.WriteLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWriteLogOperationCompleted);
            }
            this.InvokeAsync("WriteLog", new object[] {
                        key,
                        time,
                        position,
                        application,
                        operation,
                        log}, this.WriteLogOperationCompleted, userState);
        }
        
        private void OnWriteLogOperationCompleted(object arg) {
            if ((this.WriteLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WriteLogCompleted(this, new WriteLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.maritech.cn/shipmis/web/WebService.asmx/getMailState", RequestNamespace="http://www.maritech.cn/shipmis/web/WebService.asmx", ResponseNamespace="http://www.maritech.cn/shipmis/web/WebService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getMailState(string key, string id) {
            object[] results = this.Invoke("getMailState", new object[] {
                        key,
                        id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getMailStateAsync(string key, string id) {
            this.getMailStateAsync(key, id, null);
        }
        
        /// <remarks/>
        public void getMailStateAsync(string key, string id, object userState) {
            if ((this.getMailStateOperationCompleted == null)) {
                this.getMailStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMailStateOperationCompleted);
            }
            this.InvokeAsync("getMailState", new object[] {
                        key,
                        id}, this.getMailStateOperationCompleted, userState);
        }
        
        private void OngetMailStateOperationCompleted(object arg) {
            if ((this.getMailStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMailStateCompleted(this, new getMailStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.maritech.cn/shipmis/web/WebService.asmx/checkRight", RequestNamespace="http://www.maritech.cn/shipmis/web/WebService.asmx", ResponseNamespace="http://www.maritech.cn/shipmis/web/WebService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string checkRight(string key) {
            object[] results = this.Invoke("checkRight", new object[] {
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkRightAsync(string key) {
            this.checkRightAsync(key, null);
        }
        
        /// <remarks/>
        public void checkRightAsync(string key, object userState) {
            if ((this.checkRightOperationCompleted == null)) {
                this.checkRightOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckRightOperationCompleted);
            }
            this.InvokeAsync("checkRight", new object[] {
                        key}, this.checkRightOperationCompleted, userState);
        }
        
        private void OncheckRightOperationCompleted(object arg) {
            if ((this.checkRightCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkRightCompleted(this, new checkRightCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void WriteLogCompletedEventHandler(object sender, WriteLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WriteLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WriteLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMailStateCompletedEventHandler(object sender, getMailStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMailStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMailStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void checkRightCompletedEventHandler(object sender, checkRightCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkRightCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkRightCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591